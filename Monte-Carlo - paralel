## Library loaded
library(NMOF)
library(NLRoot)
library(fOptions)
library(foreach)
library(sandwich)
library(quantmod)

## Graphics

dat3 <- read.csv("table.csv", sep = ";")

plot(st.Strike, st0.vol.Bid, xlab = "Страйк", ylab = "Волатильность", main = "Улыбка волатильности по Блэк-Шоулз", type = "o", pch = 21, cex = 1.2, bg = "red", lwd = 2, col.main = "blue")
abline(2048, col="red", lty=2)

dfx <- data.frame(ev1=st.Strike, ev2=st1.vol.Bid, ev3=n:1)
with(dfx, symbols(x=ev1, y=ev2, circles=ev3, inches=1/3, ann=F, bg="steelblue2", fg=NULL))

for (i in 1:n){
  points(st.Strike[i], st1.vol.Bid[i])
}

library(aplpack)

bagplot(st.Strike, st0.vol.Bid, xlab = "Страйк", ylab = "Волатильность", main = "Улыбка волатильности по Блэк-Шоулз")

## Black - Scholes Function
BS <- 
  function(S, K, T, r, sig, type = "C") { 
    d1 <- (log(S/K) + T*(r + 0.5*sig*sig)) / (sig*sqrt(T))
    
    if(type == "C"){
      value <- S*pnorm(d1) - exp(-r*T) * K * pnorm(d1 - sig * sqrt(T))
    }
    if(type == "P"){
      value <- (S*pnorm(d1) - exp(-r*T) * K * pnorm(d1 - sig * sqrt(T))) - S + K * exp(-r * T)
    }
    return(value)
  }

implied.vol <-
  function(Price_option, Strike, Price_contract, Time_exp) {
    delta <- 10000000000
    T = Time_exp/366
    best_sigma <- 0
    
    for (i in seq(0.001, 0.999, by = 0.001)) {
      d1 <- (log(Price_contract / Strike) + i * i * T / 2) / (i * sqrt(T))
      d2 <- d1 - i*sqrt(T)
      d1 <- pnorm(d1)
      d2 <- pnorm(d2)
      OC <- Price_contract * d1 - Strike * d2
      raz <- abs(Price_option - OC)
      if (raz < delta) {
        delta = raz
        best_sigma = i
      }
    }
    return(best_sigma)
  }

dat <- read.csv("SPX_data.csv", sep = ";")
n <- dim(dat)[1]
Strike <- rep(0, n)
st.P0.Bid <- dat$st.P0.Bid
st.P0.Ask <- dat$st.P0.Ask
st.P1.Bid <- dat$st.P1.Bid
st.Price <- dat$Price
st.Strike <- dat$Strike
st0.vol.Bid <- rep(0, n)
st0.vol.Ask <- rep(0, n)
st1.vol.Bid <- rep(0, n)

for (i in 1:n){
  st0.vol.Bid[i] <- implied.vol(st.P0.Bid[i], st.Strike[i], st.Price[i], 28)
  st0.vol.Ask[i] <- implied.vol(st.P0.Ask[i], st.Strike[i], st.Price[i], 28)
  st1.vol.Bid[i] <- implied.vol(st.P1.Bid[i], st.Strike[i], st.Price[i], 28)
}

st0.vol.Bid
st0.vol.Ask
st1.vol.Bid

## Heston Bates model

# cf - характеризующая функция
# S - спот
# X - страйк
# tau - время до экспирации
# r - процентная ставка
# q - дивидендная ставка
# ... - аргументы передаваемые характеризующей функции
# implvol - логический тип: моделировать улыбку волатильности?

# StDev
n2 <- dim(dat3)[1]
st.Close <- dat3$Close
st.dev <- sd(st.Close, na.rm = TRUE)/100



Price_option1 <- 427.5
S <- 2048  ## - current stock price - котировка
X <- 1650 ## - strike price - страйк
tau <- 28/366 ## - time to maturity - время до экспирации
r <- 0  ## - процентная ставка
q <- 0 ## - дивидендная ставка
v0 <- 0.752^2 ## - текущая дисперсия
vT <- 0.752^2 ## - долгосрочная дисперсия
v <- vT  ## корреляция между спотом и дисперсией
rho <- 0.6 ## - корреляция между спотом и дисперсией
k <- 10000 # - скорость возврата к среднему
sigma <- 0.4 ## - волатильность дисперсии

delta1 <- 10000000000

result <- callHestoncf(S = S, X = X, tau = tau, r = r, q = q, v0 = v0, vT = vT, rho = rho, k = k, sigma = sigma, implVol = TRUE)
result[[1L]]
result[[2L]]


for (i in seq(0.01, 100, by = 0.01 )) {
  res <- callHestoncf(S = S, X = X, tau = tau, r = r, q = q, v0 = v0, 
                      vT = vT, rho = rho, k = i, sigma = sigma, implVol = TRUE)
  
  res2 <- res[[1L]]
  raz1 <- abs(Price_option1 - res2)
  if (raz1 < delta1) {
    delta1 = raz1
    best_k = i
  }
}

res[[1L]]
res[[2L]]    


## monte- carlo method simulation

MCPrice <- function(x = 1, t = 0, T = 1, r = 1, sigma = 1, M = 1000, f)
{
  h <- function(m) {
    u <- rnorm(m/2)
    tmp <- c(x * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t) * u), x * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t) * (-u)))
    mean(sapply(tmp, function(xx) f(xx)))
  }
  p <- h(M)
  p * exp(-r * (T - t))
}

library(iterators)
library(foreach)

require(snowfall)
sfInit(parallel = TRUE, cpus = 2)
c1 <- sfGetCluster()
clusterSetupRNG(c1, seed = rep(123, 2))

require(foreach)
require(doSNOW)
registerDoSNOW(c1)

getDoParWorkers()

MCprice2 <- function(x = 1, t = 0, T = 1, r = 1, sigma = 1, M = 1000, f) 
{
  require(foreach)
  h <- function(m) {
    u <- rnorm(m/2)
    tmp <- c(x * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t)*u), x * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t) * (-u)))
    ##g <- function(z) f(z) * (log(z/x) - (r - 0.5 * sigma^2) * (T - t)) / (x * sigma^2 * (T - t))
    mean(sapply(tmp, function(xx) f(xx)))
  }
  nodes <- getDoParWorkers()
  p <- foreach(m = rep(M/nodes, nodes), .combine = "c") %dopar% 
    h(m)
  p <- mean(p)
  p * exp(-r * (T - t))
}


S0 <- 2048
K <- 1650
r <- 0
T <- 28/366
sigma <- 0.752

GBSOption(TypeFlag = "c", S = S0, X = K, Time = T, r = r, b = r, sigma = sigma)@price


f <- function(x) max(0, x - K)
set.seed(123)
M <- 1000
MCPrice(x = S0, t = 0, T = T, r = r, sigma, M = M, f = f)

set.seed(123)
M <- 50000
MCPrice(x = S0, t = 0, T = T, r = r, sigma, M = M, f = f)

set.seed(123)
M <- 1e+06
MCPrice(x = S0, t = 0, T = T, r = r, sigma, M = M, f = f)

S0 <- 100
K <- 110
r <- 0.05
T <- 1/4
sigma <- 0.25
GBSOption(TypeFlag = "c", S = S0, X = K, Time = T, r = r, b = r, sigma = sigma)@price
f <- function(x) max(0, x - 110)
set.seed(123)
M <- 50000
MCdelta(x = S0, t = 0, T = T, r = r, sigma, M = M, f = f)


## delta hedge

# The hedge ratio as a function of time

delta  <- function(x) {
  d2 <- (log(x/K) + (r - 0.5 * sigma^2) * (T - t)) / (sigma * sqrt(T - t))
  d1 <- d2 + sigma * sqrt(T - t)
  pnorm(d1)
}

r <- 0.01
K <- 100
T <- 100
sigma <- 0.05
t <- 10
St <- 70
h <- 0.01


curve(delta, 0, 200, xlab = expression(S[t]), ylab = expression(delta = a^H(t)))
t <- 50
curve(delta, 0, 200, lty = 2, add = TRUE)
t <- 99.5
curve(delta, 0, 200, lty = 3, add = TRUE)

legend(150, 0.6, c("t=1", "t=50", "t=99.5"), lty = 1:3)


# The numerical approximation

call.price <- function(x = 1, t = 0, T = 1, r = 1, sigma = 1, K = 1) {
  d2 <- (log(x/K) + (r - 0.5 * sigma^2) * (T - t)) / (sigma * sqrt(T - t))
  d1 <- d2 + sigma * sqrt(T - t)
  x * pnorm(d1) - K * exp(-r * (T - t)) * pnorm(d2)
}

put.price <- function(x = 1, t = 0, T = 1, r = 1, sigma = 1, K = 1) {
  d2 <- (log(x/K) + (r - 0.5 * sigma^2) * (T - t)) / (sigma * sqrt(T - t))
  d1 <- d2 + sigma * sqrt(T - t)
  K * exp(-r * (T - t)) * pnorm(-d2) - x * pnorm(-d1)
}

delta.num <- function(x) (call.price(x = x + h, t = t, T = T, sigma = sigma, r = r, K = K) - call.price(x = x, t = t, T = T, sigma = sigma, r = r, K = K))/h
delta.num2 <- function(x) (call.price(x = x + h, t = t, T = T, sigma = sigma, r = r, K = K) - call.price(x = x - h, t = t, T = T, sigma = sigma, r = r, K = K))/ (2 *h)


delta(St)
delta.num(St)
delta.num2(St)

# The Monte-Carlo approach
library(iterators)
library(foreach)

require(snowfall)
sfInit(parallel = TRUE, cpus = 2)
c1 <- sfGetCluster()
clusterSetupRNG(c1, seed = rep(123, 2))

require(foreach)
require(doSNOW)
registerDoSNOW(c1)

getDoParWorkers()

MCdelta <- function(x = 1, t = 0, T = 1, r = 1, sigma = 1, M = 1000, f) 
{
  require(foreach)
  h <- function(m) {
    u <- rnorm(M/2)
    tmp <- c(x * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t)*u), x * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t) * (-u)))
    g <- function(z) f(z) * (log(z/x) - (r - 0.5 * sigma^2) * (T - t)) / (x * sigma^2 * (T - t))
    mean(sapply(tmp, function(z) g(z)))
  }
  nodes <- getDoParWorkers()
  p <- foreach(m = rep(M/nodes, nodes), .combine = "c") %dopar% 
    h(m)
  p <- mean(p)
  p * exp(-r * (T - t))
}

r <- 0.01
K <- 100
T <-100
t <- 10
sigma <- 0.05
z <- 70
f <- function(x) max(0, x - 100)
delta(z)

set.seed(123)
M <- 10000
MCdelta(x = z, t = 0, T = T, r = r, sigma, M = M, f = f)

sfStop()
registerDoSEQ()

## Mixxing Monte Carlo and numerical approximation

r <- 0.01
K <- 100
T <- 100
t <- 0
sigma <- 0.05
s <- 70
delta(s)

MCdelta2 <- function(x = 1, t = 0, T = 1, r = 1, sigma = 1, M = 1000, f, dx = 0.001) 
{
  require(foreach)
  h <- function(m) {
    u <- rnorm(M/2)
    tmp1 <- c((x + dx) * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t)*u), (x + dx) * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t) * (-u)))
    tmp2 <- c((x - dx) * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t)*u), (x - dx) * exp((r - 0.5 * sigma^2) * (T - t) + sigma * sqrt(T - t) * (-u)))
  
    mean(sapply(tmp1, function(x) f(x)) - sapply(tmp2, function(x) f(x))) / (2*dx)
  }
  nodes <- getDoParWorkers()
  p <- foreach(m = rep(M/nodes, nodes), .combine = "c") %dopar% 
    h(m)
  p <- mean(p)
  p * exp(-r * (T - t))
}

set.seed(123)
f <- function(x) max(0, x - 100)
M <- 10000
h <- 0.001
MCdelta2(x = s , t = t, T = T, r = r, sigma = sigma, f = f, M = M, dx = h)

sfStop()
registerDoSEQ()

## Greeks 

r <- 0.01
K <- 100
T <- 100
t <- 10
sigma <- 0.05
s <- 70

z <- GBSCharacteristics(TypeFlag = "c", S = s, X = K, Time = T - t, r = r, b = r, sigma = sigma)
z$theta


GBSCharacteristics(TypeFlag = "p", S = s, X = K, Time = T - t, r = r, b = r, sigma = sigma)
